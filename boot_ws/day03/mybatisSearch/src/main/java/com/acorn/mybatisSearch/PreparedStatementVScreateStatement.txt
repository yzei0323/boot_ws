Statement
 	정적인 SQL 쿼리를 실행
    쿼리마다 컴파일
 	SQL Injection에 취약
 	쿼리 문자열 안에 값을 직접 넣음
    재사용성 낮음


PreparedStatement
    (파라미터 바인딩)
    한 번 컴파일, 재사용 가능
    SQL Injection
    ?로 값을 바인딩함
    재사용성 높음 (동일 쿼리 재사용 가능)



 SQL Injection?
사용자가 입력한 값을 통해 악의적인 SQL 문을 주입해서
데이터베이스를 조작하거나 탈취하는 공격 방식
사용자 입력값이 SQL 쿼리에 그대로 삽입되면,
공격자가 의도적으로 SQL 문법을 조작해서
원래 의도와 다른 동작을 하게 만드는 것


 # Statement 조회
 String name = "황예지";
 Statement stmt = conn.createStatement();
 String sql = "SELECT * FROM acorntbl  WHERE name = '" + name + "'";
 ResultSet rs = stmt.executeQuery(sql);



 =>   SQL Injection에 취약 (name에 ' OR '1'='1 같은 값이 들어가면 문제가 생김)
 =>   성능도 떨어짐 (매번 SQL이 새로 파싱되고 컴파일됨)


SQL Injection  경험하기 ##########

String name =  " ' OR '1'='1 ";
String sql = "SELECT * FROM  acorntbl WHERE name = '" + name + "'";
System.out.println(sql);
 =>
SELECT * FROM acorntbl WHERE name = ' ' OR '1'='1';
모든쿼리내용이 조회됨 (모든 회원정보가 조회될 수 있다)


예시)
SELECT * FROM  acorntbl  WHERE username = '입력값'
사용자가 admin' -- 라고 입력하면:



sql에서  -- 뒤에 내용은 무시됨  주석으로 처리됨
비밀번호 없이 로그인할 수 있게된다.


insert into acorntbl values('admin', '1234', '관리자');
id = admin' --

SELECT * FROM acorntbl WHERE id = 'admin'   and  pw='1234';
SELECT * FROM acorntbl WHERE id = 'admin' --' and  pw='1234';